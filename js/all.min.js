var BunnyDefender, game;
BunnyDefender = {}, BunnyDefender.Boot = function () {
}, BunnyDefender.Boot.prototype = {preload: function () {
    this.load.image("preloaderBar", "images/loader_bar.png"), this.load.image("titleimage", "images/TitleImage.png")
}, create: function () {
    this.input.maxPointers = 1, this.stage.disableVisibilityChange = !1, this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL, this.scale.minWidth = 270, this.scale.minHeight = 480, this.scale.pageAlignHorizontally = !0, this.scale.pageAlignVertically = !0, this.stage.forcePortrait = !0, this.scale.setScreenSize(!0), this.input.addPointer(), this.stage.backgroundColor = "#171642", this.state.start("Preloader")
}}, BunnyDefender.Preloader = function () {
    this.preloadBar = this.titleText = null, this.ready = !1
}, BunnyDefender.Preloader.prototype = {preload: function () {
    this.preloadBar = this.add.sprite(this.world.centerX, this.world.centerY, "preloaderBar"), this.preloadBar.anchor.setTo(.5, .5), this.load.setPreloadSprite(this.preloadBar), this.titleText = this.add.image(this.world.centerX, this.world.centerY - 220, "titleimage"), this.titleText.anchor.setTo(.5, .5), this.load.image("titlescreen", "images/TitleBG.png"), this.load.bitmapFont("eightbitwonder", "fonts/eightbitwonder.png", "fonts/eightbitwonder.fnt"), this.load.image("sky", "images/sky.png"), this.load.image("hill", "images/hill.png"), this.load.atlasXML("bunny", "images/spritesheets/bunny.png", "images/spritesheets/bunny.xml"), this.load.atlasXML("spacerock", "images/spritesheets/SpaceRock.png", "images/spritesheets/SpaceRock.xml"), this.load.image("explosion", "images/explosion.png"), this.load.image("ghost", "images/ghost.png"), this.load.audio("explosion_audio", "audio/explosion.mp3"), this.load.audio("hurt_audio", "audio/hurt.mp3"), this.load.audio("select_audio", "audio/select.mp3"), this.load.audio("game_audio", "audio/bgm.mp3")
}, create: function () {
    this.preloadBar.cropEnabled = !1
}, update: function () {
    this.cache.isSoundDecoded("game_audio") && !this.ready && (this.ready = !0, this.state.start("StartMenu"))
}}, BunnyDefender.StartMenu = function () {
    this.startBG = this.startPrompt = this.ding = null
}, BunnyDefender.StartMenu.prototype = {create: function () {
    this.ding = this.add.audio("select_audio"), this.startBG = this.add.image(0, 0, "titlescreen"), this.startBG.inputEnabled = !0, this.startBG.events.onInputDown.addOnce(this.startGame, this), this.startPrompt = this.add.bitmapText(this.world.centerX - 155, this.world.centerY, "eightbitwonder", "Touch to Start!", 24)
}, startGame: function () {
    this.ding.play(), this.state.start("Game")
}}, BunnyDefender.Game = function () {
    this.totalBunnies = null, this.bunnyGroup = null, this.totalSpacerocks = null, this.spacerockgroup = null, this.burst = null, this.gameover = null, this.countdown = null, this.overmessage = null, this.secondsElapsed = null, this.timer = null, this.music = null, this.ouch = null, this.boom = null, this.ding = null
}, BunnyDefender.Game.prototype = {create: function () {
    this.gameover = !1, this.secondsElapsed = 0, this.timer = this.time.create(!1), this.timer.loop(1e3, this.updateSeconds, this), this.totalBunnies = 20, this.totalSpacerocks = 13, this.music = this.add.audio("game_audio"), this.music.play("", 0, .3, !0), this.ouch = this.add.audio("hurt_audio"), this.boom = this.add.audio("explosion_audio"), this.ding = this.add.audio("select_audio"), this.buildWorld()
}, updateSeconds: function () {
    return this.secondsElapsed++
}, buildWorld: function () {
    this.add.image(0, 0, "sky"), this.add.image(0, 800, "hill"), this.buildBunnies(), this.buildSpaceRocks(), this.buildEmitter(), this.countdown = this.add.bitmapText(10, 10, "eightbitwonder", "Bunnies Left " + this.totalBunnies, 20), this.timer.start()
}, buildEmitter: function () {
    this.burst = this.add.emitter(0, 0, 80), this.burst.minParticleScale = .3, this.burst.maxParticleScale = 1.2, this.burst.minParticleSpeed.setTo(-30, 30), this.burst.maxParticleSpeed.setTo(30, -30), this.burst.makeParticles("explosion"), this.input.onDown.add(this.fireBurst, this)
}, fireBurst: function (t) {
    this.gameover || (this.boom.play(), this.boom.volume = .2, this.burst.emitX = t.x, this.burst.emitY = t.y, this.burst.start(!0, 2e3, null, 20))
}, buildBunnies: function () {
    var t, e, i, s;
    for (this.bunnyGroup = this.add.group(), this.bunnyGroup.enableBody = !0, e = i = 0, s = this.totalBunnies; s >= 0 ? s > i : i > s; e = s >= 0 ? ++i : --i)t = this.bunnyGroup.create(this.rnd.integerInRange(-10, this.world.width - 50), this.rnd.integerInRange(this.world.height - 180, this.world.height - 60), "bunny", "Bunny0000"), t.anchor.setTo(.5, .5), t.body.moves = !1, t.animations.add("Rest", this.game.math.numberArray(1, 58)), t.animations.add("Walk", this.game.math.numberArray(68, 107)), t.animations.play("Rest", 24, !0), this.assignBunnyMovement(t)
}, assignBunnyMovement: function (t) {
    var e, i, s;
    i = Math.floor(this.rnd.realInRange(50, this.world.width - 50)), e = this.rnd.integerInRange(2e3, 6e3), t.scale.x = i < t.x ? 1 : -1, s = this.add.tween(t).to({x: i}, 3500, Phaser.Easing.Quadratic.InOut, !0, e), s.onStart.add(this.startBunny, this), s.onComplete.add(this.stopBunny, this)
}, startBunny: function (t) {
    t.animations.stop("Rest"), t.animations.play("Walk", 24, !0)
}, stopBunny: function (t) {
    t.animations.stop("Walk"), t.animations.play("Rest", 24, !0), this.assignBunnyMovement(t)
}, buildSpaceRocks: function () {
    var t, e, i, s, n;
    for (this.spacerockgroup = this.add.group(), t = s = 0, n = this.totalSpacerocks; n >= 0 ? n > s : s > n; t = n >= 0 ? ++s : --s)e = this.spacerockgroup.create(this.rnd.integerInRange(0, this.world.width), this.rnd.realInRange(-1500, 0), "spacerock", "SpaceRock0000"), i = this.rnd.realInRange(.3, 1), e.scale.x = i, e.scale.y = i, this.physics.enable(e, Phaser.Physics.ARCADE), e.enableBody = !0, e.body.velocity.y = this.rnd.realInRange(200, 400), e.animations.add("Fall"), e.animations.play("Fall", 24, !0), e.checkWorldBounds = !0, e.events.onOutOfBounds.add(this.resetRock, this)
}, resetRock: function (t) {
    return t.y > this.world.height ? this.respawnRock(t) : void 0
}, respawnRock: function (t) {
    return this.gameover ? void 0 : (t.reset(this.rnd.integerInRange(0, this.world.width), this.rnd.realInRange(-1500, 0)), t.body.velocity.y = this.rnd.realInRange(200, 400))
}, burstCollision: function (t) {
    return this.respawnRock(t)
}, bunnyCollision: function (t, e) {
    e.exists && (this.ouch.play(), this.resetRock(t), this.makeGhost(e), e.kill(), this.totalBunnies--, this.checkBunniesLeft())
}, checkBunniesLeft: function () {
    this.totalBunnies <= 0 ? (this.music.stop(), console.log(""), this.gameover = !0, this.countdown.setText("Bunnies Left 0"), this.overmessage = this.add.bitmapText(this.world.centerX - 180, this.world.centerY - 40, "eightbitwonder", "Game Over\n\n " + this.secondsElapsed, 42), this.overmessage.align = "center", this.overmessage.inputEnabled = !0, this.overmessage.events.onInputDown.addOnce(this.quitGame, this)) : this.countdown.setText("Bunnies Left " + this.totalBunnies)
}, quitGame: function () {
    this.ding.play(), this.state.start("StartMenu")
}, friendlyFire: function (t) {
    t.exists && (this.ouch.play(), t.kill(), this.makeGhost(t), this.totalBunnies--, this.checkBunniesLeft())
}, makeGhost: function (t) {
    var e;
    e = this.add.sprite(t.x - 20, t.y - 180, "ghost"), e.anchor.setTo(.5, .5), e.scale.x = t.scale.x, this.physics.enable(e, Phaser.Physics.ARCADE), e.enableBody = !0, e.checkWorldBounds = !0, e.body.velocity.y = -800
}, update: function () {
    return this.physics.arcade.overlap(this.spacerockgroup, this.burst, this.burstCollision, null, this), this.physics.arcade.overlap(this.spacerockgroup, this.bunnyGroup, this.bunnyCollision, null, this), this.physics.arcade.overlap(this.bunnyGroup, this.burst, this.friendlyFire, null, this)
}}, game = new Phaser.Game(540, 960, Phaser.AUTO, "gameContainer"), game.state.add("Boot", BunnyDefender.Boot), game.state.add("Preloader", BunnyDefender.Preloader), game.state.add("StartMenu", BunnyDefender.StartMenu), game.state.add("Game", BunnyDefender.Game), game.state.start("Boot");